#!/usr/bin/python

"""
This is an example of custom module
The "loop" function implements the protocol between riemann-agent
and the custom module, while "fun" generates the events
"""

import sys
import json

def format_number(num):
    # by specs - numbers must be encoded with their decimal
    # representation, exactly 4 digits
    if num > 9999:
        raise RuntimeError("Value too big")
    return "%04d" % num


def loop(fun):
    while True:
        msg = sys.stdin.readline().strip()
        if not msg or msg == "exit":
            break
        if msg.startswith("call "):
            in_ = json.loads(msg[5:])
            data = fun(in_)

            sys.stdout.write(format_number(len(data)))
            for item in data:
                out = json.dumps(item)
                size = format_number(len(out))
                sys.stdout.write("%s%s" % (size, out))
            sys.stdout.flush()

def fun(in_):
    return [dict(metric=4.2, attributes={"input": str(in_)}, service="from python"),
            dict(metric=0, attribtes={"message": "second event"}, service="from python - 2")]

if __name__ == "__main__":
    loop(fun)
